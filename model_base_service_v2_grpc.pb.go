// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: services/model_base_service_v2.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelBaseServiceV2Client is the client API for ModelBaseServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelBaseServiceV2Client interface {
	GetById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DeleteById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DeleteList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateMany(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ReplaceById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Replace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	InsertOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	InsertMany(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Count(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type modelBaseServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewModelBaseServiceV2Client(cc grpc.ClientConnInterface) ModelBaseServiceV2Client {
	return &modelBaseServiceV2Client{cc}
}

func (c *modelBaseServiceV2Client) GetById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) GetList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) DeleteById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/DeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) DeleteList(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/DeleteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) UpdateById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/UpdateById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) UpdateOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/UpdateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) UpdateMany(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/UpdateMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) ReplaceById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/ReplaceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) Replace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) InsertOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/InsertOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) InsertMany(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/InsertMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelBaseServiceV2Client) Count(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.ModelBaseServiceV2/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelBaseServiceV2Server is the server API for ModelBaseServiceV2 service.
// All implementations must embed UnimplementedModelBaseServiceV2Server
// for forward compatibility
type ModelBaseServiceV2Server interface {
	GetById(context.Context, *Request) (*Response, error)
	Get(context.Context, *Request) (*Response, error)
	GetList(context.Context, *Request) (*Response, error)
	DeleteById(context.Context, *Request) (*Response, error)
	DeleteList(context.Context, *Request) (*Response, error)
	UpdateById(context.Context, *Request) (*Response, error)
	UpdateOne(context.Context, *Request) (*Response, error)
	UpdateMany(context.Context, *Request) (*Response, error)
	ReplaceById(context.Context, *Request) (*Response, error)
	Replace(context.Context, *Request) (*Response, error)
	InsertOne(context.Context, *Request) (*Response, error)
	InsertMany(context.Context, *Request) (*Response, error)
	Count(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedModelBaseServiceV2Server()
}

// UnimplementedModelBaseServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedModelBaseServiceV2Server struct {
}

func (UnimplementedModelBaseServiceV2Server) GetById(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedModelBaseServiceV2Server) Get(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedModelBaseServiceV2Server) GetList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedModelBaseServiceV2Server) DeleteById(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedModelBaseServiceV2Server) DeleteList(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedModelBaseServiceV2Server) UpdateById(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateById not implemented")
}
func (UnimplementedModelBaseServiceV2Server) UpdateOne(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedModelBaseServiceV2Server) UpdateMany(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedModelBaseServiceV2Server) ReplaceById(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceById not implemented")
}
func (UnimplementedModelBaseServiceV2Server) Replace(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedModelBaseServiceV2Server) InsertOne(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOne not implemented")
}
func (UnimplementedModelBaseServiceV2Server) InsertMany(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMany not implemented")
}
func (UnimplementedModelBaseServiceV2Server) Count(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedModelBaseServiceV2Server) mustEmbedUnimplementedModelBaseServiceV2Server() {}

// UnsafeModelBaseServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelBaseServiceV2Server will
// result in compilation errors.
type UnsafeModelBaseServiceV2Server interface {
	mustEmbedUnimplementedModelBaseServiceV2Server()
}

func RegisterModelBaseServiceV2Server(s grpc.ServiceRegistrar, srv ModelBaseServiceV2Server) {
	s.RegisterService(&ModelBaseServiceV2_ServiceDesc, srv)
}

func _ModelBaseServiceV2_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).GetById(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).GetList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).DeleteById(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/DeleteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).DeleteList(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_UpdateById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).UpdateById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/UpdateById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).UpdateById(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/UpdateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).UpdateOne(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_UpdateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).UpdateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/UpdateMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).UpdateMany(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_ReplaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).ReplaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/ReplaceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).ReplaceById(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).Replace(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_InsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).InsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/InsertOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).InsertOne(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_InsertMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).InsertMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/InsertMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).InsertMany(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelBaseServiceV2_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelBaseServiceV2Server).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ModelBaseServiceV2/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelBaseServiceV2Server).Count(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelBaseServiceV2_ServiceDesc is the grpc.ServiceDesc for ModelBaseServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelBaseServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ModelBaseServiceV2",
	HandlerType: (*ModelBaseServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _ModelBaseServiceV2_GetById_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ModelBaseServiceV2_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ModelBaseServiceV2_GetList_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _ModelBaseServiceV2_DeleteById_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _ModelBaseServiceV2_DeleteList_Handler,
		},
		{
			MethodName: "UpdateById",
			Handler:    _ModelBaseServiceV2_UpdateById_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _ModelBaseServiceV2_UpdateOne_Handler,
		},
		{
			MethodName: "UpdateMany",
			Handler:    _ModelBaseServiceV2_UpdateMany_Handler,
		},
		{
			MethodName: "ReplaceById",
			Handler:    _ModelBaseServiceV2_ReplaceById_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _ModelBaseServiceV2_Replace_Handler,
		},
		{
			MethodName: "InsertOne",
			Handler:    _ModelBaseServiceV2_InsertOne_Handler,
		},
		{
			MethodName: "InsertMany",
			Handler:    _ModelBaseServiceV2_InsertMany_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _ModelBaseServiceV2_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/model_base_service_v2.proto",
}
