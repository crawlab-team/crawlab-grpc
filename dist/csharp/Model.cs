// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpc {

  /// <summary>Holder for reflection information generated from model.proto</summary>
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb2RlbC5wcm90bxIEZ3JwYyKIAwoEVGFzaxILCgNfaWQYASABKAkSEQoJ",
            "c3BpZGVyX2lkGAIgASgJEhAKCHN0YXJ0X3RzGAMgASgJEhEKCWZpbmlzaF90",
            "cxgEIAEoCRIOCgZzdGF0dXMYBSABKAkSDwoHbm9kZV9pZBgGIAEoCRILCgNj",
            "bWQYCCABKAkSDQoFcGFyYW0YCSABKAkSDQoFZXJyb3IYCiABKAkSFAoMcmVz",
            "dWx0X2NvdW50GAsgASgFEhcKD2Vycm9yX2xvZ19jb3VudBgMIAEoBRIVCg13",
            "YWl0X2R1cmF0aW9uGA0gASgFEhgKEHJ1bnRpbWVfZHVyYXRpb24YDiABKAUS",
            "FgoOdG90YWxfZHVyYXRpb24YDyABKAUSCwoDcGlkGBAgASgFEhAKCHJ1bl90",
            "eXBlGBEgASgJEhMKC3NjaGVkdWxlX2lkGBIgASgJEgwKBHR5cGUYEyABKAkS",
            "DwoHdXNlcl9pZBgUIAEoCRIRCgljcmVhdGVfdHMYFSABKAkSEQoJdXBkYXRl",
            "X3RzGBYgASgJIvUCCgZTcGlkZXISCwoDX2lkGAEgASgJEgwKBG5hbWUYAiAB",
            "KAkSFAoMZGlzcGxheV9uYW1lGAMgASgJEgwKBHR5cGUYBCABKAkSCwoDY29s",
            "GAYgASgJEhcKBGVudnMYCCADKAsyCS5ncnBjLkVudhIOCgZyZW1hcmsYCSAB",
            "KAkSEgoKcHJvamVjdF9pZBgLIAEoCRIRCglpc19wdWJsaWMYDCABKAgSCwoD",
            "Y21kGA0gASgJEhEKCWlzX3NjcmFweRgOIAEoCBIQCgh0ZW1wbGF0ZRgPIAEo",
            "CRIQCghpc19kZWR1cBgQIAEoCBITCgtkZWR1cF9maWVsZBgRIAEoCRIUCgxk",
            "ZWR1cF9tZXRob2QYEiABKAkSEwoLaXNfd2ViX2hvb2sYEyABKAgSFAoMd2Vi",
            "X2hvb2tfdXJsGBQgASgJEg8KB3VzZXJfaWQYFSABKAkSEQoJY3JlYXRlX3Rz",
            "GBYgASgJEhEKCXVwZGF0ZV90cxgXIAEoCSLzAQoETm9kZRILCgNfaWQYASAB",
            "KAkSDAoEbmFtZRgCIAEoCRIKCgJpcBgDIAEoCRIMCgRwb3J0GAUgASgJEgsK",
            "A21hYxgGIAEoCRIQCghob3N0bmFtZRgHIAEoCRITCgtkZXNjcmlwdGlvbhgI",
            "IAEoCRILCgNrZXkYCSABKAkSJAoIc2V0dGluZ3MYCiABKAsyEi5ncnBjLk5v",
            "ZGVTZXR0aW5ncxIRCglpc19tYXN0ZXIYCyABKAgSEQoJdXBkYXRlX3RzGAwg",
            "ASgJEhEKCWNyZWF0ZV90cxgNIAEoCRIWCg51cGRhdGVfdHNfdW5peBgOIAEo",
            "AyIiCgNFbnYSDAoEbmFtZRgBIAEoCRINCgV2YWx1ZRgCIAEoCSIjCgxOb2Rl",
            "U2V0dGluZ3MSEwoLbWF4X3J1bm5lcnMYASABKAVCCFoGLjtncnBjYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Task), global::Grpc.Task.Parser, new[]{ "Id", "SpiderId", "StartTs", "FinishTs", "Status", "NodeId", "Cmd", "Param", "Error", "ResultCount", "ErrorLogCount", "WaitDuration", "RuntimeDuration", "TotalDuration", "Pid", "RunType", "ScheduleId", "Type", "UserId", "CreateTs", "UpdateTs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Spider), global::Grpc.Spider.Parser, new[]{ "Id", "Name", "DisplayName", "Type", "Col", "Envs", "Remark", "ProjectId", "IsPublic", "Cmd", "IsScrapy", "Template", "IsDedup", "DedupField", "DedupMethod", "IsWebHook", "WebHookUrl", "UserId", "CreateTs", "UpdateTs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Node), global::Grpc.Node.Parser, new[]{ "Id", "Name", "Ip", "Port", "Mac", "Hostname", "Description", "Key", "Settings", "IsMaster", "UpdateTs", "CreateTs", "UpdateTsUnix" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.Env), global::Grpc.Env.Parser, new[]{ "Name", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpc.NodeSettings), global::Grpc.NodeSettings.Parser, new[]{ "MaxRunners" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Task : pb::IMessage<Task>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      Id_ = other.Id_;
      spiderId_ = other.spiderId_;
      startTs_ = other.startTs_;
      finishTs_ = other.finishTs_;
      status_ = other.status_;
      nodeId_ = other.nodeId_;
      cmd_ = other.cmd_;
      param_ = other.param_;
      error_ = other.error_;
      resultCount_ = other.resultCount_;
      errorLogCount_ = other.errorLogCount_;
      waitDuration_ = other.waitDuration_;
      runtimeDuration_ = other.runtimeDuration_;
      totalDuration_ = other.totalDuration_;
      pid_ = other.pid_;
      runType_ = other.runType_;
      scheduleId_ = other.scheduleId_;
      type_ = other.type_;
      userId_ = other.userId_;
      createTs_ = other.createTs_;
      updateTs_ = other.updateTs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spider_id" field.</summary>
    public const int SpiderIdFieldNumber = 2;
    private string spiderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpiderId {
      get { return spiderId_; }
      set {
        spiderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_ts" field.</summary>
    public const int StartTsFieldNumber = 3;
    private string startTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StartTs {
      get { return startTs_; }
      set {
        startTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "finish_ts" field.</summary>
    public const int FinishTsFieldNumber = 4;
    private string finishTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FinishTs {
      get { return finishTs_; }
      set {
        finishTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private string status_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 6;
    private string nodeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 8;
    private string cmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 9;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 10;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result_count" field.</summary>
    public const int ResultCountFieldNumber = 11;
    private int resultCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultCount {
      get { return resultCount_; }
      set {
        resultCount_ = value;
      }
    }

    /// <summary>Field number for the "error_log_count" field.</summary>
    public const int ErrorLogCountFieldNumber = 12;
    private int errorLogCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorLogCount {
      get { return errorLogCount_; }
      set {
        errorLogCount_ = value;
      }
    }

    /// <summary>Field number for the "wait_duration" field.</summary>
    public const int WaitDurationFieldNumber = 13;
    private int waitDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitDuration {
      get { return waitDuration_; }
      set {
        waitDuration_ = value;
      }
    }

    /// <summary>Field number for the "runtime_duration" field.</summary>
    public const int RuntimeDurationFieldNumber = 14;
    private int runtimeDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RuntimeDuration {
      get { return runtimeDuration_; }
      set {
        runtimeDuration_ = value;
      }
    }

    /// <summary>Field number for the "total_duration" field.</summary>
    public const int TotalDurationFieldNumber = 15;
    private int totalDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDuration {
      get { return totalDuration_; }
      set {
        totalDuration_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 16;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "run_type" field.</summary>
    public const int RunTypeFieldNumber = 17;
    private string runType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunType {
      get { return runType_; }
      set {
        runType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schedule_id" field.</summary>
    public const int ScheduleIdFieldNumber = 18;
    private string scheduleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScheduleId {
      get { return scheduleId_; }
      set {
        scheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 19;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 20;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_ts" field.</summary>
    public const int CreateTsFieldNumber = 21;
    private string createTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTs {
      get { return createTs_; }
      set {
        createTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_ts" field.</summary>
    public const int UpdateTsFieldNumber = 22;
    private string updateTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTs {
      get { return updateTs_; }
      set {
        updateTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SpiderId != other.SpiderId) return false;
      if (StartTs != other.StartTs) return false;
      if (FinishTs != other.FinishTs) return false;
      if (Status != other.Status) return false;
      if (NodeId != other.NodeId) return false;
      if (Cmd != other.Cmd) return false;
      if (Param != other.Param) return false;
      if (Error != other.Error) return false;
      if (ResultCount != other.ResultCount) return false;
      if (ErrorLogCount != other.ErrorLogCount) return false;
      if (WaitDuration != other.WaitDuration) return false;
      if (RuntimeDuration != other.RuntimeDuration) return false;
      if (TotalDuration != other.TotalDuration) return false;
      if (Pid != other.Pid) return false;
      if (RunType != other.RunType) return false;
      if (ScheduleId != other.ScheduleId) return false;
      if (Type != other.Type) return false;
      if (UserId != other.UserId) return false;
      if (CreateTs != other.CreateTs) return false;
      if (UpdateTs != other.UpdateTs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (SpiderId.Length != 0) hash ^= SpiderId.GetHashCode();
      if (StartTs.Length != 0) hash ^= StartTs.GetHashCode();
      if (FinishTs.Length != 0) hash ^= FinishTs.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (ResultCount != 0) hash ^= ResultCount.GetHashCode();
      if (ErrorLogCount != 0) hash ^= ErrorLogCount.GetHashCode();
      if (WaitDuration != 0) hash ^= WaitDuration.GetHashCode();
      if (RuntimeDuration != 0) hash ^= RuntimeDuration.GetHashCode();
      if (TotalDuration != 0) hash ^= TotalDuration.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (RunType.Length != 0) hash ^= RunType.GetHashCode();
      if (ScheduleId.Length != 0) hash ^= ScheduleId.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (CreateTs.Length != 0) hash ^= CreateTs.GetHashCode();
      if (UpdateTs.Length != 0) hash ^= UpdateTs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SpiderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpiderId);
      }
      if (StartTs.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StartTs);
      }
      if (FinishTs.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FinishTs);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Status);
      }
      if (NodeId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NodeId);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cmd);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Param);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Error);
      }
      if (ResultCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ResultCount);
      }
      if (ErrorLogCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ErrorLogCount);
      }
      if (WaitDuration != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(WaitDuration);
      }
      if (RuntimeDuration != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RuntimeDuration);
      }
      if (TotalDuration != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TotalDuration);
      }
      if (Pid != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Pid);
      }
      if (RunType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(RunType);
      }
      if (ScheduleId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ScheduleId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Type);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(UserId);
      }
      if (CreateTs.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CreateTs);
      }
      if (UpdateTs.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(UpdateTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SpiderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SpiderId);
      }
      if (StartTs.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StartTs);
      }
      if (FinishTs.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FinishTs);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Status);
      }
      if (NodeId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NodeId);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cmd);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Param);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Error);
      }
      if (ResultCount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ResultCount);
      }
      if (ErrorLogCount != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ErrorLogCount);
      }
      if (WaitDuration != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(WaitDuration);
      }
      if (RuntimeDuration != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RuntimeDuration);
      }
      if (TotalDuration != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TotalDuration);
      }
      if (Pid != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Pid);
      }
      if (RunType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(RunType);
      }
      if (ScheduleId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ScheduleId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Type);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(UserId);
      }
      if (CreateTs.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CreateTs);
      }
      if (UpdateTs.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(UpdateTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (SpiderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpiderId);
      }
      if (StartTs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTs);
      }
      if (FinishTs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FinishTs);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (ResultCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultCount);
      }
      if (ErrorLogCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorLogCount);
      }
      if (WaitDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitDuration);
      }
      if (RuntimeDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RuntimeDuration);
      }
      if (TotalDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalDuration);
      }
      if (Pid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (RunType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RunType);
      }
      if (ScheduleId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScheduleId);
      }
      if (Type.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (UserId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (CreateTs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CreateTs);
      }
      if (UpdateTs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdateTs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.SpiderId.Length != 0) {
        SpiderId = other.SpiderId;
      }
      if (other.StartTs.Length != 0) {
        StartTs = other.StartTs;
      }
      if (other.FinishTs.Length != 0) {
        FinishTs = other.FinishTs;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.ResultCount != 0) {
        ResultCount = other.ResultCount;
      }
      if (other.ErrorLogCount != 0) {
        ErrorLogCount = other.ErrorLogCount;
      }
      if (other.WaitDuration != 0) {
        WaitDuration = other.WaitDuration;
      }
      if (other.RuntimeDuration != 0) {
        RuntimeDuration = other.RuntimeDuration;
      }
      if (other.TotalDuration != 0) {
        TotalDuration = other.TotalDuration;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.RunType.Length != 0) {
        RunType = other.RunType;
      }
      if (other.ScheduleId.Length != 0) {
        ScheduleId = other.ScheduleId;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.CreateTs.Length != 0) {
        CreateTs = other.CreateTs;
      }
      if (other.UpdateTs.Length != 0) {
        UpdateTs = other.UpdateTs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            SpiderId = input.ReadString();
            break;
          }
          case 26: {
            StartTs = input.ReadString();
            break;
          }
          case 34: {
            FinishTs = input.ReadString();
            break;
          }
          case 42: {
            Status = input.ReadString();
            break;
          }
          case 50: {
            NodeId = input.ReadString();
            break;
          }
          case 66: {
            Cmd = input.ReadString();
            break;
          }
          case 74: {
            Param = input.ReadString();
            break;
          }
          case 82: {
            Error = input.ReadString();
            break;
          }
          case 88: {
            ResultCount = input.ReadInt32();
            break;
          }
          case 96: {
            ErrorLogCount = input.ReadInt32();
            break;
          }
          case 104: {
            WaitDuration = input.ReadInt32();
            break;
          }
          case 112: {
            RuntimeDuration = input.ReadInt32();
            break;
          }
          case 120: {
            TotalDuration = input.ReadInt32();
            break;
          }
          case 128: {
            Pid = input.ReadInt32();
            break;
          }
          case 138: {
            RunType = input.ReadString();
            break;
          }
          case 146: {
            ScheduleId = input.ReadString();
            break;
          }
          case 154: {
            Type = input.ReadString();
            break;
          }
          case 162: {
            UserId = input.ReadString();
            break;
          }
          case 170: {
            CreateTs = input.ReadString();
            break;
          }
          case 178: {
            UpdateTs = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            SpiderId = input.ReadString();
            break;
          }
          case 26: {
            StartTs = input.ReadString();
            break;
          }
          case 34: {
            FinishTs = input.ReadString();
            break;
          }
          case 42: {
            Status = input.ReadString();
            break;
          }
          case 50: {
            NodeId = input.ReadString();
            break;
          }
          case 66: {
            Cmd = input.ReadString();
            break;
          }
          case 74: {
            Param = input.ReadString();
            break;
          }
          case 82: {
            Error = input.ReadString();
            break;
          }
          case 88: {
            ResultCount = input.ReadInt32();
            break;
          }
          case 96: {
            ErrorLogCount = input.ReadInt32();
            break;
          }
          case 104: {
            WaitDuration = input.ReadInt32();
            break;
          }
          case 112: {
            RuntimeDuration = input.ReadInt32();
            break;
          }
          case 120: {
            TotalDuration = input.ReadInt32();
            break;
          }
          case 128: {
            Pid = input.ReadInt32();
            break;
          }
          case 138: {
            RunType = input.ReadString();
            break;
          }
          case 146: {
            ScheduleId = input.ReadString();
            break;
          }
          case 154: {
            Type = input.ReadString();
            break;
          }
          case 162: {
            UserId = input.ReadString();
            break;
          }
          case 170: {
            CreateTs = input.ReadString();
            break;
          }
          case 178: {
            UpdateTs = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Spider : pb::IMessage<Spider>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Spider> _parser = new pb::MessageParser<Spider>(() => new Spider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Spider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spider(Spider other) : this() {
      Id_ = other.Id_;
      name_ = other.name_;
      displayName_ = other.displayName_;
      type_ = other.type_;
      col_ = other.col_;
      envs_ = other.envs_.Clone();
      remark_ = other.remark_;
      projectId_ = other.projectId_;
      isPublic_ = other.isPublic_;
      cmd_ = other.cmd_;
      isScrapy_ = other.isScrapy_;
      template_ = other.template_;
      isDedup_ = other.isDedup_;
      dedupField_ = other.dedupField_;
      dedupMethod_ = other.dedupMethod_;
      isWebHook_ = other.isWebHook_;
      webHookUrl_ = other.webHookUrl_;
      userId_ = other.userId_;
      createTs_ = other.createTs_;
      updateTs_ = other.updateTs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Spider Clone() {
      return new Spider(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 6;
    private string col_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Col {
      get { return col_; }
      set {
        col_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "envs" field.</summary>
    public const int EnvsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Grpc.Env> _repeated_envs_codec
        = pb::FieldCodec.ForMessage(66, global::Grpc.Env.Parser);
    private readonly pbc::RepeatedField<global::Grpc.Env> envs_ = new pbc::RepeatedField<global::Grpc.Env>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpc.Env> Envs {
      get { return envs_; }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 9;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 11;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_public" field.</summary>
    public const int IsPublicFieldNumber = 12;
    private bool isPublic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPublic {
      get { return isPublic_; }
      set {
        isPublic_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 13;
    private string cmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cmd {
      get { return cmd_; }
      set {
        cmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_scrapy" field.</summary>
    public const int IsScrapyFieldNumber = 14;
    private bool isScrapy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsScrapy {
      get { return isScrapy_; }
      set {
        isScrapy_ = value;
      }
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 15;
    private string template_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Template {
      get { return template_; }
      set {
        template_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_dedup" field.</summary>
    public const int IsDedupFieldNumber = 16;
    private bool isDedup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDedup {
      get { return isDedup_; }
      set {
        isDedup_ = value;
      }
    }

    /// <summary>Field number for the "dedup_field" field.</summary>
    public const int DedupFieldFieldNumber = 17;
    private string dedupField_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DedupField {
      get { return dedupField_; }
      set {
        dedupField_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dedup_method" field.</summary>
    public const int DedupMethodFieldNumber = 18;
    private string dedupMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DedupMethod {
      get { return dedupMethod_; }
      set {
        dedupMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_web_hook" field.</summary>
    public const int IsWebHookFieldNumber = 19;
    private bool isWebHook_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWebHook {
      get { return isWebHook_; }
      set {
        isWebHook_ = value;
      }
    }

    /// <summary>Field number for the "web_hook_url" field.</summary>
    public const int WebHookUrlFieldNumber = 20;
    private string webHookUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WebHookUrl {
      get { return webHookUrl_; }
      set {
        webHookUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 21;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_ts" field.</summary>
    public const int CreateTsFieldNumber = 22;
    private string createTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTs {
      get { return createTs_; }
      set {
        createTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_ts" field.</summary>
    public const int UpdateTsFieldNumber = 23;
    private string updateTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTs {
      get { return updateTs_; }
      set {
        updateTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Spider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Spider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Type != other.Type) return false;
      if (Col != other.Col) return false;
      if(!envs_.Equals(other.envs_)) return false;
      if (Remark != other.Remark) return false;
      if (ProjectId != other.ProjectId) return false;
      if (IsPublic != other.IsPublic) return false;
      if (Cmd != other.Cmd) return false;
      if (IsScrapy != other.IsScrapy) return false;
      if (Template != other.Template) return false;
      if (IsDedup != other.IsDedup) return false;
      if (DedupField != other.DedupField) return false;
      if (DedupMethod != other.DedupMethod) return false;
      if (IsWebHook != other.IsWebHook) return false;
      if (WebHookUrl != other.WebHookUrl) return false;
      if (UserId != other.UserId) return false;
      if (CreateTs != other.CreateTs) return false;
      if (UpdateTs != other.UpdateTs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Col.Length != 0) hash ^= Col.GetHashCode();
      hash ^= envs_.GetHashCode();
      if (Remark.Length != 0) hash ^= Remark.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (IsPublic != false) hash ^= IsPublic.GetHashCode();
      if (Cmd.Length != 0) hash ^= Cmd.GetHashCode();
      if (IsScrapy != false) hash ^= IsScrapy.GetHashCode();
      if (Template.Length != 0) hash ^= Template.GetHashCode();
      if (IsDedup != false) hash ^= IsDedup.GetHashCode();
      if (DedupField.Length != 0) hash ^= DedupField.GetHashCode();
      if (DedupMethod.Length != 0) hash ^= DedupMethod.GetHashCode();
      if (IsWebHook != false) hash ^= IsWebHook.GetHashCode();
      if (WebHookUrl.Length != 0) hash ^= WebHookUrl.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (CreateTs.Length != 0) hash ^= CreateTs.GetHashCode();
      if (UpdateTs.Length != 0) hash ^= UpdateTs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (Col.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Col);
      }
      envs_.WriteTo(output, _repeated_envs_codec);
      if (Remark.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Remark);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ProjectId);
      }
      if (IsPublic != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsPublic);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Cmd);
      }
      if (IsScrapy != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsScrapy);
      }
      if (Template.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Template);
      }
      if (IsDedup != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsDedup);
      }
      if (DedupField.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(DedupField);
      }
      if (DedupMethod.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(DedupMethod);
      }
      if (IsWebHook != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsWebHook);
      }
      if (WebHookUrl.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WebHookUrl);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(UserId);
      }
      if (CreateTs.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CreateTs);
      }
      if (UpdateTs.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(UpdateTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Type);
      }
      if (Col.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Col);
      }
      envs_.WriteTo(ref output, _repeated_envs_codec);
      if (Remark.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Remark);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ProjectId);
      }
      if (IsPublic != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsPublic);
      }
      if (Cmd.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Cmd);
      }
      if (IsScrapy != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsScrapy);
      }
      if (Template.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Template);
      }
      if (IsDedup != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsDedup);
      }
      if (DedupField.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(DedupField);
      }
      if (DedupMethod.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(DedupMethod);
      }
      if (IsWebHook != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(IsWebHook);
      }
      if (WebHookUrl.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(WebHookUrl);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(UserId);
      }
      if (CreateTs.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CreateTs);
      }
      if (UpdateTs.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(UpdateTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Col.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col);
      }
      size += envs_.CalculateSize(_repeated_envs_codec);
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (IsPublic != false) {
        size += 1 + 1;
      }
      if (Cmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cmd);
      }
      if (IsScrapy != false) {
        size += 1 + 1;
      }
      if (Template.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Template);
      }
      if (IsDedup != false) {
        size += 2 + 1;
      }
      if (DedupField.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DedupField);
      }
      if (DedupMethod.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DedupMethod);
      }
      if (IsWebHook != false) {
        size += 2 + 1;
      }
      if (WebHookUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WebHookUrl);
      }
      if (UserId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (CreateTs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CreateTs);
      }
      if (UpdateTs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpdateTs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Spider other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Col.Length != 0) {
        Col = other.Col;
      }
      envs_.Add(other.envs_);
      if (other.Remark.Length != 0) {
        Remark = other.Remark;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.IsPublic != false) {
        IsPublic = other.IsPublic;
      }
      if (other.Cmd.Length != 0) {
        Cmd = other.Cmd;
      }
      if (other.IsScrapy != false) {
        IsScrapy = other.IsScrapy;
      }
      if (other.Template.Length != 0) {
        Template = other.Template;
      }
      if (other.IsDedup != false) {
        IsDedup = other.IsDedup;
      }
      if (other.DedupField.Length != 0) {
        DedupField = other.DedupField;
      }
      if (other.DedupMethod.Length != 0) {
        DedupMethod = other.DedupMethod;
      }
      if (other.IsWebHook != false) {
        IsWebHook = other.IsWebHook;
      }
      if (other.WebHookUrl.Length != 0) {
        WebHookUrl = other.WebHookUrl;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.CreateTs.Length != 0) {
        CreateTs = other.CreateTs;
      }
      if (other.UpdateTs.Length != 0) {
        UpdateTs = other.UpdateTs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 50: {
            Col = input.ReadString();
            break;
          }
          case 66: {
            envs_.AddEntriesFrom(input, _repeated_envs_codec);
            break;
          }
          case 74: {
            Remark = input.ReadString();
            break;
          }
          case 90: {
            ProjectId = input.ReadString();
            break;
          }
          case 96: {
            IsPublic = input.ReadBool();
            break;
          }
          case 106: {
            Cmd = input.ReadString();
            break;
          }
          case 112: {
            IsScrapy = input.ReadBool();
            break;
          }
          case 122: {
            Template = input.ReadString();
            break;
          }
          case 128: {
            IsDedup = input.ReadBool();
            break;
          }
          case 138: {
            DedupField = input.ReadString();
            break;
          }
          case 146: {
            DedupMethod = input.ReadString();
            break;
          }
          case 152: {
            IsWebHook = input.ReadBool();
            break;
          }
          case 162: {
            WebHookUrl = input.ReadString();
            break;
          }
          case 170: {
            UserId = input.ReadString();
            break;
          }
          case 178: {
            CreateTs = input.ReadString();
            break;
          }
          case 186: {
            UpdateTs = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            Type = input.ReadString();
            break;
          }
          case 50: {
            Col = input.ReadString();
            break;
          }
          case 66: {
            envs_.AddEntriesFrom(ref input, _repeated_envs_codec);
            break;
          }
          case 74: {
            Remark = input.ReadString();
            break;
          }
          case 90: {
            ProjectId = input.ReadString();
            break;
          }
          case 96: {
            IsPublic = input.ReadBool();
            break;
          }
          case 106: {
            Cmd = input.ReadString();
            break;
          }
          case 112: {
            IsScrapy = input.ReadBool();
            break;
          }
          case 122: {
            Template = input.ReadString();
            break;
          }
          case 128: {
            IsDedup = input.ReadBool();
            break;
          }
          case 138: {
            DedupField = input.ReadString();
            break;
          }
          case 146: {
            DedupMethod = input.ReadString();
            break;
          }
          case 152: {
            IsWebHook = input.ReadBool();
            break;
          }
          case 162: {
            WebHookUrl = input.ReadString();
            break;
          }
          case 170: {
            UserId = input.ReadString();
            break;
          }
          case 178: {
            CreateTs = input.ReadString();
            break;
          }
          case 186: {
            UpdateTs = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Node : pb::IMessage<Node>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      Id_ = other.Id_;
      name_ = other.name_;
      ip_ = other.ip_;
      port_ = other.port_;
      mac_ = other.mac_;
      hostname_ = other.hostname_;
      description_ = other.description_;
      key_ = other.key_;
      settings_ = other.settings_ != null ? other.settings_.Clone() : null;
      isMaster_ = other.isMaster_;
      updateTs_ = other.updateTs_;
      createTs_ = other.createTs_;
      updateTsUnix_ = other.updateTsUnix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "_id" field.</summary>
    public const int IdFieldNumber = 1;
    private string Id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return Id_; }
      set {
        Id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 6;
    private string mac_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 7;
    private string hostname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 9;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 10;
    private global::Grpc.NodeSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpc.NodeSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    /// <summary>Field number for the "is_master" field.</summary>
    public const int IsMasterFieldNumber = 11;
    private bool isMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaster {
      get { return isMaster_; }
      set {
        isMaster_ = value;
      }
    }

    /// <summary>Field number for the "update_ts" field.</summary>
    public const int UpdateTsFieldNumber = 12;
    private string updateTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateTs {
      get { return updateTs_; }
      set {
        updateTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_ts" field.</summary>
    public const int CreateTsFieldNumber = 13;
    private string createTs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateTs {
      get { return createTs_; }
      set {
        createTs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_ts_unix" field.</summary>
    public const int UpdateTsUnixFieldNumber = 14;
    private long updateTsUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTsUnix {
      get { return updateTsUnix_; }
      set {
        updateTsUnix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Mac != other.Mac) return false;
      if (Hostname != other.Hostname) return false;
      if (Description != other.Description) return false;
      if (Key != other.Key) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if (IsMaster != other.IsMaster) return false;
      if (UpdateTs != other.UpdateTs) return false;
      if (CreateTs != other.CreateTs) return false;
      if (UpdateTsUnix != other.UpdateTsUnix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      if (IsMaster != false) hash ^= IsMaster.GetHashCode();
      if (UpdateTs.Length != 0) hash ^= UpdateTs.GetHashCode();
      if (CreateTs.Length != 0) hash ^= CreateTs.GetHashCode();
      if (UpdateTsUnix != 0L) hash ^= UpdateTsUnix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Port);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Mac);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Hostname);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Key);
      }
      if (settings_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Settings);
      }
      if (IsMaster != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsMaster);
      }
      if (UpdateTs.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UpdateTs);
      }
      if (CreateTs.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CreateTs);
      }
      if (UpdateTsUnix != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(UpdateTsUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Port);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Mac);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Hostname);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Key);
      }
      if (settings_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Settings);
      }
      if (IsMaster != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsMaster);
      }
      if (UpdateTs.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UpdateTs);
      }
      if (CreateTs.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CreateTs);
      }
      if (UpdateTsUnix != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(UpdateTsUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      if (IsMaster != false) {
        size += 1 + 1;
      }
      if (UpdateTs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateTs);
      }
      if (CreateTs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateTs);
      }
      if (UpdateTsUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTsUnix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          Settings = new global::Grpc.NodeSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      if (other.IsMaster != false) {
        IsMaster = other.IsMaster;
      }
      if (other.UpdateTs.Length != 0) {
        UpdateTs = other.UpdateTs;
      }
      if (other.CreateTs.Length != 0) {
        CreateTs = other.CreateTs;
      }
      if (other.UpdateTsUnix != 0L) {
        UpdateTsUnix = other.UpdateTsUnix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 42: {
            Port = input.ReadString();
            break;
          }
          case 50: {
            Mac = input.ReadString();
            break;
          }
          case 58: {
            Hostname = input.ReadString();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 74: {
            Key = input.ReadString();
            break;
          }
          case 82: {
            if (settings_ == null) {
              Settings = new global::Grpc.NodeSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
          case 88: {
            IsMaster = input.ReadBool();
            break;
          }
          case 98: {
            UpdateTs = input.ReadString();
            break;
          }
          case 106: {
            CreateTs = input.ReadString();
            break;
          }
          case 112: {
            UpdateTsUnix = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 42: {
            Port = input.ReadString();
            break;
          }
          case 50: {
            Mac = input.ReadString();
            break;
          }
          case 58: {
            Hostname = input.ReadString();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 74: {
            Key = input.ReadString();
            break;
          }
          case 82: {
            if (settings_ == null) {
              Settings = new global::Grpc.NodeSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
          case 88: {
            IsMaster = input.ReadBool();
            break;
          }
          case 98: {
            UpdateTs = input.ReadString();
            break;
          }
          case 106: {
            CreateTs = input.ReadString();
            break;
          }
          case 112: {
            UpdateTsUnix = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Env : pb::IMessage<Env>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Env> _parser = new pb::MessageParser<Env>(() => new Env());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Env> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Env() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Env(Env other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Env Clone() {
      return new Env(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Env);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Env other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Env other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeSettings : pb::IMessage<NodeSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeSettings> _parser = new pb::MessageParser<NodeSettings>(() => new NodeSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpc.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeSettings(NodeSettings other) : this() {
      maxRunners_ = other.maxRunners_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeSettings Clone() {
      return new NodeSettings(this);
    }

    /// <summary>Field number for the "max_runners" field.</summary>
    public const int MaxRunnersFieldNumber = 1;
    private int maxRunners_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRunners {
      get { return maxRunners_; }
      set {
        maxRunners_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxRunners != other.MaxRunners) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxRunners != 0) hash ^= MaxRunners.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MaxRunners != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxRunners);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MaxRunners != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxRunners);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxRunners != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRunners);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeSettings other) {
      if (other == null) {
        return;
      }
      if (other.MaxRunners != 0) {
        MaxRunners = other.MaxRunners;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxRunners = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaxRunners = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
